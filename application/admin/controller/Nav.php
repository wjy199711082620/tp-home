<?php
/**
 * Created by PhpStorm.
 * User: ASUS
 * Date: 2019/10/10
 * Time: 10:14
 */

namespace app\admin\controller;


use think\Controller;
use think\Db;
//use think\Request;

class Nav extends Base

{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    //查看
    public function index(){
       return view('index');
    }
    //开页面
    public function openinsert(){
      return view('openinsert');
    }
    //插入的逻辑
    public function insert(){
//        后台 :验证 权限   请求方式  参数
        $method=$this->request->method();//1.使用继承控制器的方法，所以这个方法使用的前提是继承controller类
//      $method=request()->method();//2.使用助手函数的方法
//        $method=$request->method;//3.在函数的中传入Request $request参数，利用继承Request
        if(!$method=='POST'){
            return json([
                'code'=>404,
                "msg"=>"请求方式不正确"
            ]);
        }
        $data=input('post.');//这里特别注意的是有点
        $validate=validate('Nav');
        if(!$validate->scene('insert')->check($data)){
            return json([
                'code'=>404,
                'msg'=>$validate->getError()
            ]);
        }
        $result=Db::table('nav')->insert($data);
        if($result>0){
            return json([
                'code'=>200,
                'msg'=>'插入成功'
            ]);

        }
    }
    public function delete(){
        if(!$this->request->isPost()){
            return json([
                'code'=>404,
                "msg"=>"请求方式不正确"
            ]);
        }
        $id=input('post.')['id'];
        $validate=validate('Nav');
        if(!$validate->scene('del')->check($id)){
            return json([
                'code'=>404,
                'msg'=>$validate->getError()
            ]);
        }
        $res=Db::table('nav')->where('id',$id)->delete();
        if($res>0){
            return json([
                'code'=>200,
                'msg'=>"删除成功",
            ]);
        }else{
            return json([
                'code'=>404,
                'msg'=>"删除失败"
            ]);
        }
    }
    //编辑数据
    public function update(){
        if(!$this->request->isPost()){
            return json([
                'code'=>404,
                "msg"=>"请求方式不正确"
            ]);
        }
        $data=input('post.');
//        dump($data);
        $validate=validate('Nav');
        if(!$validate->scene('exit')->check($data)){
            return json([
                'code'=>404,
                'msg'=>$validate->getError()
            ]);
        }
        $result=Db::table('nav')->where('id',$data['id'])->update([$data['field']=>$data['value']]);
        if($result>0){
            return json([
                'code'=>200,
                'msg'=>'恭喜您，编辑成功！'

            ]);
        }else{
            return json([
                'code'=>404,
                'msg'=>"编辑失败，请重试"
            ]);
        }

    }
    //返回数据
    public function query(){
        $data=Db::table('nav')->select();
        $count=Db::table('nav')->count();
        return json([
            'code'=>0,//默认为0
            'msg'=>'成功',
            'data'=>$data,
            'count'=>$count,
        ]);
    }

}